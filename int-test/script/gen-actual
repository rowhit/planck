#!/usr/bin/env bash

#######################################################
# Take a look at int-test/script/int-tests
# instead. It is ClojureScript code instead of a big
# shell script like this test.
# 
# Thinking we can migrate these tests there and
# perhaps even adopt cljs.test if it makes sense
# for the integration tests. First step is to start
# using ClojureScript instead of Bash. :)
######################################################

COLORFGBG="0;15"
unset PLANCK_CLASSPATH

export PLANCK="$PLANCK_BINARY --quiet --theme=plain"

echo "Repeated ordered -e and -i, supressing nil"
$PLANCK -i $SRC/no-ns/foo.cljs -e ':a' -e 'nil' -i $SRC/no-ns/bar.cljs -e 2 -i $SRC/no-ns/foo.cljs

echo "Test :cljs/quit"
$PLANCK <<REPL_INPUT
1
:cljs/quit
2
REPL_INPUT

echo "Test quit"
$PLANCK <<REPL_INPUT
1
quit
2
REPL_INPUT

echo "Test exit"
$PLANCK <<REPL_INPUT
1
exit
2
REPL_INPUT

echo "Exit on first error"
$PLANCK -e"(require 'planck.repl)" -e'(set! planck.repl/*planck-integration-tests* true)' -e'(println "ok")' -e'(throw (js/Error. "x"))' -e'(println "unreachable")'

echo "Multi-line data"
$PLANCK <<REPL_INPUT
[1
2]
REPL_INPUT

echo "Multi-line string"
$PLANCK <<REPL_INPUT
"abc
def"
REPL_INPUT

echo "space before and after"
$PLANCK <<REPL_INPUT
 3 
REPL_INPUT

echo "Test print to stderr"
$PLANCK <<REPL_INPUT
(binding [*print-fn* *print-err-fn*]
  (println "hello stderr"))
REPL_INPUT

echo "Test main"
$PLANCK -c $SRC -m test-main.core 3 4
echo $?

echo "Test main zero"
$PLANCK -c $SRC -m test-main.zero
echo $?

echo "Test main one"
# Return value of main is _not_ the return value
$PLANCK -c $SRC -m test-main.one
echo $?

echo "Test main unhandled"
$PLANCK -c $SRC -m test-main.unhandled > /dev/null
echo $?

echo "Test main exit"
$PLANCK -c $SRC -m test-main.exit 
echo $?

echo "Test REPL exit"
$PLANCK <<REPL_INPUT
(require 'planck.core)
(planck.core/exit 118)
REPL_INPUT
echo $?

echo "Test call fn exit"
$PLANCK -c $SRC <<REPL_INPUT
(require 'test-exit.core)
(test-exit.core/please-exit 119)
REPL_INPUT
echo $?

echo "Test run file with exit"
$PLANCK $SRC/test_exit/exit_in_file.cljs
echo $?

echo "Test run malformed expression"
$PLANCK -e ']'

echo "Test run malformed script"
$PLANCK $SRC/malformed/core.cljs

echo "Test run expression with analysis error"
$PLANCK -e '(defn)'

echo "Test run script with analysis error"
$PLANCK $SRC/analysis/core.cljs

echo "Test in-ns"
$PLANCK <<REPL_INPUT
(in-ns not-symbol)
(in-ns)
(in-ns 'alpha.beta)
(def x 3)
(in-ns (symbol "gamma.delta"))
(def y 4)
(ns test.core (:require [clojure.set :as set]))
(set/intersection #{:a :b} #{:a :c})
(in-ns 'cljs.user)
(in-ns 'test.core)
(set/intersection #{:a :b} #{:a :c})
REPL_INPUT

echo "Test require REPL special"
$PLANCK -c $SRC <<REPL_INPUT
(require 'test-require.core)
test-require.core/success
(in-ns 'test-require.core)
(require 'test-require.core :reload)
test-require.core/success
REPL_INPUT

echo "Test require REPL special exit in file"
$PLANCK -c $SRC <<REPL_INPUT
(require 'test-require.exit)
REPL_INPUT
echo $?

echo "Test require :reload in changing spec"
mkdir -p /tmp/PLANCK_SRC/foo
$PLANCK -c /tmp/PLANCK_SRC <<REPL_INPUT
(require 'planck.io)
(planck.io/spit "/tmp/PLANCK_SRC/foo/bar.cljs" "(ns foo.bar)\n(def x :initial)")
(require '[foo.bar :as baz])
baz/x
(planck.io/spit "/tmp/PLANCK_SRC/foo/bar.cljs" "(ns foo.bar)\n(def x :reloaded)")
(require '[foo.bar :as quux] :reload)
quux/x
REPL_INPUT
rm -rf /tmp/PLANCK_SRC/foo

echo "Test require :reload-all"
mkdir -p /tmp/PLANCK_SRC/foo
$PLANCK -c /tmp/PLANCK_SRC <<REPL_INPUT
(require 'planck.io)
(planck.io/spit "/tmp/PLANCK_SRC/foo/bar.cljs" "(ns foo.bar)\n(def x :initial)")
(require 'foo.bar)
foo.bar/x
(planck.io/spit "/tmp/PLANCK_SRC/foo/bar.cljs" "(ns foo.bar)\n(def x :reloaded)")
(require 'foo.bar :reload-all)
foo.bar/x
REPL_INPUT
rm -rf /tmp/PLANCK_SRC/foo

echo "Test require :reload with cache"
mkdir -p /tmp/PLANCK_SRC/foo
mkdir -p /tmp/PLANCK_CACHE
$PLANCK -k /tmp/PLANCK_CACHE -c /tmp/PLANCK_SRC <<REPL_INPUT
(require 'planck.io)
(planck.io/spit "/tmp/PLANCK_SRC/foo/bar.cljs" "(ns foo.bar)\n(def x :initial)")
(require 'foo.bar)
foo.bar/x
(require 'foo.bar :reload)
foo.bar/x
(planck.io/spit "/tmp/PLANCK_SRC/foo/bar.cljs" "(ns foo.bar)\n(def x :reloaded)")
(require 'foo.bar :reload)
foo.bar/x
REPL_INPUT
rm -rf /tmp/PLANCK_CACHE
rm -rf /tmp/PLANCK_SRC/foo

# Note, the output of this will change with #68 / CLJS-1417
echo "Test require-macros unknown ns"
$PLANCK -c $SRC <<REPL_INPUT
(require-macros 'unknown-ns.core)
REPL_INPUT

echo "Test require-macros REPL special"
$PLANCK -c $SRC <<REPL_INPUT
(require-macros 'test-require-macros.core)
(+ 3 (test-require-macros.core/str->int "2"))
REPL_INPUT

echo "Test dir"
$PLANCK <<REPL_INPUT
(ns foo.bar)
(def xfirst 3)
(def ^:private nfirst 4)
(def macro-crazy 10)
(ns foo.bar$macros)
(defmacro somemacro [])
(in-ns 'cljs.user)
(dir foo.bar)
REPL_INPUT

echo "Test doc special"
$PLANCK -c $SRC <<REPL_INPUT
(doc bogus)
(doc inc)
(doc when)
(doc if)
(doc catch)
(doc doc)
(doc fn) ; macro with :forms
(doc IWriter)
(defn f "docstring" [param])
(doc f)
(require '[test-doc-source.core :as tds])
(doc test-doc-source.core/my-function)
(doc tds/my-function)
(doc test-doc-source.core)
REPL_INPUT

echo "Test source"
$PLANCK -c $SRC <<REPL_INPUT
(source bogus)
(source inc)
(source when)
(require '[test-doc-source.core :as tds])
(source test-doc-source.core/my-function)
(source tds/my-function)
(require 'planck.core)
(source planck.core/*reader-fn*)
REPL_INPUT

echo "Test pst special"
$PLANCK <<REPL_INPUT
(require 'planck.repl)
(set! planck.repl/*planck-integration-tests* true)
(defn f [] (throw (js/Error. "whoah")))
(defn g [] (throw (js/Error. "ouch")))
(f)
(pst)
(def e *e)
(g)
(pst)
(pst e)
REPL_INPUT

echo "Test load-file REPL special"
$PLANCK -c $SRC <<REPL_INPUT
(load-file "int-test/src/test_load_file/core.cljs")
test-load-file.core/success
(load-file "int-test/src/load-me")
load-me.core/a
load-me.core/b
REPL_INPUT

echo "Test load-file from classpath"
$PLANCK -c $SRC <<REPL_INPUT
(load-file "test_load_file/core.cljs")
test-load-file.core/success
REPL_INPUT

echo "Test load REPL special"
$PLANCK -c $SRC <<REPL_INPUT
(in-ns 'test-load-file.other)
(load "core")
test-load-file.core/success
REPL_INPUT

echo "Test load-file from classpath env var"
PLANCK_CLASSPATH=$SRC $PLANCK <<REPL_INPUT
(load-file "test_load_file/core.cljs")
test-load-file.core/success
REPL_INPUT

echo "Test doc support for load-file REPL special"
$PLANCK -c $SRC <<REPL_INPUT
(doc load-file)
REPL_INPUT

echo "Test load-file REPL bad filename"
$PLANCK -c $SRC <<REPL_INPUT
(load-file "int-test/src/test_load_file/nofile.cljs")
REPL_INPUT

echo "Test load-file REPL error in file"
$PLANCK -c $SRC <<REPL_INPUT
(try
  (load-file "int-test/src/test_load_file/error_in_file.cljs")
  (println "failed load-file error in file")
  (catch :default _))
REPL_INPUT

echo "Test load-file REPL exit in file"
$PLANCK -c $SRC <<REPL_INPUT
(load-file "int-test/src/test_load_file/exit_in_file.cljs")
REPL_INPUT
echo $?

echo "Shell with-sh-dir"
$PLANCK <<REPL_INPUT
(require '[planck.shell :refer-macros [with-sh-dir]])
(with-sh-dir "/"
  (:out (planck.shell/sh "pwd")))
(require 'planck.io)
(with-sh-dir (planck.io/file "/")
  (:out (planck.shell/sh "pwd")))
REPL_INPUT

echo "Shell stderr"
$PLANCK <<REPL_INPUT
(require 'planck.shell)
(into (sorted-set) (planck.shell/sh "$PLANCK_BINARY" "--theme=plain" "-e" "(binding [*print-fn* *print-err-fn*] (println \"this is from stderr\"))"))
REPL_INPUT

echo "reader and read-line"
$PLANCK <<REPL_INPUT
(require '[planck.core :refer [*in* -close spit read-line]] '[planck.io :refer [reader]])
(defn test-read [content]
  (spit "/tmp/PLANCK_TEST.txt" content)
  (let [rdr (reader "/tmp/PLANCK_TEST.txt")]
    (try
      (binding [*in* rdr]
        (prn (read-line))
        (prn (read-line))
        (prn (read-line)))
      (finally
        (-close rdr)))))
(test-read "")
(test-read "a")
(test-read "a")
(test-read "a\n")
(test-read "a\nb")
(test-read "a\nb\n")
REPL_INPUT

echo "reader and line-seq"
$PLANCK <<REPL_INPUT
(require '[planck.core :refer [-close spit line-seq]] '[planck.io :refer [reader]])
(defn test-read [content]
  (spit "/tmp/PLANCK_TEST.txt" content)
  (let [rdr (reader "/tmp/PLANCK_TEST.txt")]
    (try
      (prn (line-seq rdr))
      (finally
        (-close rdr)))))
(test-read "")
(test-read "a")
(test-read "a")
(test-read "a\n")
(test-read "a\nb")
(test-read "a\nb\n")
REPL_INPUT

echo "writer"
$PLANCK <<REPL_INPUT
(require '[planck.core :refer [-close slurp spit]] '[planck.io :refer [reader writer]])
(defn test-write [content]
  (spit "/tmp/PLANCK_TEST.txt" content)
  (let [wtr (writer "/tmp/PLANCK_TEST.txt")]
    (try
      (-write wtr content)
      (finally
        (-close wtr))))
  (= content (slurp "/tmp/PLANCK_TEST.txt")))
(test-write "")
(test-write "a")
(test-write "a")
(test-write "a\n")
(test-write "a\nb")
(test-write "a\nb\n")
REPL_INPUT

echo "writer append"
$PLANCK <<REPL_INPUT
(require '[planck.core :refer [-close slurp spit]] '[planck.io :refer [reader writer]])
(defn test-write [previous-content content]
  (spit "/tmp/PLANCK_TEST.txt" previous-content)
  (let [wtr (writer "/tmp/PLANCK_TEST.txt" :append true)]
    (try
      (-write wtr content)
      (finally
        (-close wtr))))
  (= (str previous-content content) (slurp "/tmp/PLANCK_TEST.txt")))
(test-write "" "")
(test-write "" "a")
(test-write "" "a")
(test-write "" "a\n")
(test-write "" "a\nb")
(test-write "" "a\nb\n")
(test-write "x" "")
(test-write "x" "a")
(test-write "x" "a")
(test-write "x" "a\n")
(test-write "x" "a\nb")
(test-write "x" "a\nb\n")
(test-write "x\n" "")
(test-write "x\n" "a")
(test-write "x\n" "a")
(test-write "x\n" "a\n")
(test-write "x\n" "a\nb")
(test-write "x\n" "a\nb\n")
REPL_INPUT

echo "Test write and read binary"
$PLANCK <<REPL_INPUT
(require '[planck.core :refer [-write-bytes -read-bytes -close]] 
         '[planck.io :refer [input-stream output-stream delete-file]])
(def binary-file "/tmp/PLANCK_BINARY.dat")
(let [os (output-stream binary-file)]
  (-write-bytes os [1 2 3]) 
  (-close os))
(let [is (input-stream binary-file)]
  (prn (-read-bytes is))
  (-close is))
(let [os (output-stream binary-file :append true)]
  (-write-bytes os [4 5 6]) 
  (-close os))
(let [is (input-stream binary-file)]
  (prn (-read-bytes is))
  (-close is))
(let [os (output-stream binary-file :append false)]
  (-write-bytes os [7 8 9 10]) 
  (-close os))
(let [is (input-stream binary-file)]
  (prn (-read-bytes is))
  (-close is))
(delete-file binary-file)
REPL_INPUT

echo "Test encoding"
$PLANCK <<REPL_INPUT
(require '[planck.core :refer [slurp spit]])
(def content "abc123")
(def filename "/tmp/PLANCK_TEST_ENCODING.txt")
(spit filename content :encoding "UTF-16")
(= content (slurp filename :encoding "UTF-16"))
REPL_INPUT

echo "Test file-seq"
# The output should be depth-first, as below
mkdir /tmp/PLANCK_FILE_SEQ
mkdir /tmp/PLANCK_FILE_SEQ/A
mkdir /tmp/PLANCK_FILE_SEQ/A/B
touch /tmp/PLANCK_FILE_SEQ/A/B/E
touch /tmp/PLANCK_FILE_SEQ/A/B/F
mkdir /tmp/PLANCK_FILE_SEQ/A/C
touch /tmp/PLANCK_FILE_SEQ/A/C/G
touch /tmp/PLANCK_FILE_SEQ/A/D
$PLANCK <<REPL_INPUT
(require '[planck.core] '[planck.io])
(run! println (sort (map :path (planck.core/file-seq (planck.io/file "/tmp/PLANCK_FILE_SEQ")))))
REPL_INPUT
rm -rf /tmp/PLANCK_FILE_SEQ

echo "Test Google Closure index"
$PLANCK <<REPL_INPUT
(ns foo.bar (:require clojure.string))
REPL_INPUT

echo "Test availability of goog libs"
$PLANCK <<REPL_INPUT
(require 'goog.date.Date)
(goog.date.Date. 2005 3 3)
REPL_INPUT

echo "Test empty list of *command-line-args*"
$PLANCK <<REPL_INPUT
(require 'planck.core)
planck.core/*command-line-args*
(if (exists? *command-line-args*)
  ^:cljs.analyzer/no-resolve *command-line-args*
  planck.core/*command-line-args*)
REPL_INPUT

echo "Test empty list of *command-line-args* following main opt"
$PLANCK -r <<REPL_INPUT
(require 'planck.core)
planck.core/*command-line-args*
(if (exists? *command-line-args*)
  ^:cljs.analyzer/no-resolve *command-line-args*
  planck.core/*command-line-args*)
REPL_INPUT

echo "Treat init opts that follow -r main opt as *command-line-args* instead of evaluating them"
$PLANCK -r -c src -e '(println "hi")' -v <<REPL_INPUT
(require 'planck.core)
planck.core/*command-line-args*
(if (exists? *command-line-args*)
  ^:cljs.analyzer/no-resolve *command-line-args*
  planck.core/*command-line-args*)
REPL_INPUT

echo "Treat init opts that follow nice -m ns-name as *command-line-args* instead of evaluating them"
$PLANCK -c $SRC -m test-main.args -v -e '(println "hi")'
echo $?

echo "Treat init opts that follow nice --main=ns-name as *command-line-args* instead of evaluating them"
$PLANCK -c $SRC --main=test-main.args -v -e '(println "hi")'
echo $?

echo "Treat init opts that follow less nice -mns-name as *command-line-args* instead of evaluating them"
$PLANCK -c $SRC -mtest-main.args -v -e '(println "hi")'
echo $?

echo "Treat main opts that follow a main opt as *command-line-args* instead of evaluating them"
$PLANCK -r - -m test-main.args -r <<REPL_INPUT
(require 'planck.core)
planck.core/*command-line-args*
(if (exists? *command-line-args*)
  ^:cljs.analyzer/no-resolve *command-line-args*
  planck.core/*command-line-args*)
REPL_INPUT

echo "Test *command-line-args* with nice clumped init opts"
$PLANCK -ve '(println "hi")' -r here are some args 2>/dev/null <<REPL_INPUT
(require 'planck.core)
planck.core/*command-line-args*
(if (exists? *command-line-args*)
  ^:cljs.analyzer/no-resolve *command-line-args*
  planck.core/*command-line-args*)
REPL_INPUT

echo "Test *command-line-args* with less nicely clumped init opts"
$PLANCK -ve'(println "hi")' -r here are some args 2>/dev/null <<REPL_INPUT
(require 'planck.core)
planck.core/*command-line-args*
(if (exists? *command-line-args*)
  ^:cljs.analyzer/no-resolve *command-line-args*
  planck.core/*command-line-args*)
REPL_INPUT

echo "Test binding of *command-line-args* in file run from command line"
$PLANCK $SRC/test_args/args_in_file.cljs here are some args
echo $?

echo "Test classpath"
$PLANCK -c $SRC:${SRC}2 <<REPL_INPUT
(require 'test-src-paths.core)
test-src-paths.core/src-path
REPL_INPUT
$PLANCK -c ${SRC}2:$SRC <<REPL_INPUT
(require 'test-src-paths.core)
test-src-paths.core/src-path
REPL_INPUT

echo "Test classpath env var"
PLANCK_CLASSPATH=$SRC:${SRC}2 $PLANCK <<REPL_INPUT
(require 'test-src-paths.core)
test-src-paths.core/src-path
REPL_INPUT
PLANCK_CLASSPATH=${SRC}2:$SRC $PLANCK <<REPL_INPUT
(require 'test-src-paths.core)
test-src-paths.core/src-path
REPL_INPUT

echo "Test JAR support"
$PLANCK -c $HOME/test-jar.jar <<REPL_INPUT
(require 'test-jar.core)
test-jar.core/x
REPL_INPUT

echo "Test reader"
$PLANCK <<REPL_INPUT
#js [1 2]
#_ #js {:a 1}
#inst "2015-08-18T01:53:14.614-00:00"
#{1 1}
{1 1 1 2}
REPL_INPUT

echo "Test verbose"
$PLANCK -v <<REPL_INPUT
(+ 2 3)
REPL_INPUT

echo "Test restore state when require fails"
$PLANCK << REPL_INPUT
(require '[clojure.set :refer [diff]])
(require '[clojure.set])
REPL_INPUT

echo "Test reader and analysis diagnostics"
$PLANCK << REPL_INPUT
(require '[foo.bar :quu])
)
REPL_INPUT

echo "Test eval"
$PLANCK << REPL_INPUT
(require '[planck.core :refer [eval]])
(eval 1)
(eval '(+ 1 2))
(def a 3)
(eval a)
(eval '(let [a 10] (+ 3 4 a)))
(eval '(def a 1))
(def addition-list (list + 1 2))
(eval addition-list)
(eval (concat addition-list [10]))
(eval (list 'def 'lucky-number (concat addition-list [10])))
lucky-number
(defn square [x] (* x x))
(defn cube [x] (* x x x))
((eval (list comp square cube)) 2)
((eval (eval +)) 2 3)
(def addition-list2 (list (fn [a b] (+ a b)) 1 2))
(eval addition-list2)
(eval (list #'inc 3))
REPL_INPUT

echo "Ensure we can get into Planck REPL ns and ns are loaded"
$PLANCK << REPL_INPUT
(require 'planck.repl)
(in-ns 'planck.repl)
(empty? (keys (:cljs.analyzer/namespaces @st)))
REPL_INPUT

echo "Test timers keeps script going"
$PLANCK - << SCRIPT_INPUT
(println "start")
(js/setTimeout (fn [] (println "from timer")) 200)
(println "end")
SCRIPT_INPUT

echo "Test sh-async keeps script going"
$PLANCK - << SCRIPT_INPUT
(require 'planck.shell)
(println "start")
(planck.shell/sh-async "sleep" "1" (fn [r] (println "from sh-async")))
(println "end")
SCRIPT_INPUT

echo "Can exit with timer"
$PLANCK << REPL_INPUT
(println "start")
(js/setTimeout (fn [] (println "from timer")) 2000000)
(println "end")
:cljs/quit
REPL_INPUT

echo "Test chained timer and sh-async keeps script going"
$PLANCK - << SCRIPT_INPUT
(require 'planck.shell)
(def c (atom 5))
(declare wait-more)
(defn shell-more
  []
  (planck.shell/sh-async "sleep" "1" (fn [r] (prn r) (wait-more))))
(defn wait-more
  []
  (js/setTimeout
    (fn []
      (prn @c)
      (when (pos? (swap! c dec))
        (shell-more)))
    1000))
(wait-more)
SCRIPT_INPUT

echo "Disable asserts"
$PLANCK -a << REPL_INPUT
(assert false)
REPL_INPUT

echo "Testing console logging"
$PLANCK - << SCRIPT_INPUT
(js/console.log "log")
(js/console.trace "trace")
(js/console.debug "debug")
(js/console.info "info")
(js/console.warn "warn")
(js/console.error "error")
SCRIPT_INPUT

echo "Testing low-level print-fns"
$PLANCK - << SCRIPT_INPUT
(*print-fn* nil)
(*print-fn* true)
(*print-fn* "a")
(*print-fn* 1)
(*print-fn* #js [1 2])
(*print-fn* #js {:foo 1})
(*print-err-fn* nil)
(*print-err-fn* true)
(*print-err-fn* "a")
(*print-err-fn* 1)
(*print-err-fn* #js [1 2])
(*print-err-fn* #js {:foo 1})
SCRIPT_INPUT
echo ""

echo "Test global-exportis"
$PLANCK -c ${SRC}3 <<REPL_INPUT
(require '[calculator :refer [add]])
(add 2 3)
REPL_INPUT
